#!/usr/bin/env ruby

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'ostruct'
require 'optparse'
require 'yaml'
require 'rubygems'
require 'meac_control'

CONFIG_FILE = File.join(ENV['HOME'], '.meacctl')

options = OpenStruct.new
options.commands = []
options.query_mode = false
options.debug = false

# Configure ip and device from the config file.
if File.exist?(CONFIG_FILE)
  config = YAML.load_file(CONFIG_FILE)
  options.ip = config['ip']
  options.device = MEACControl::Device.new(config['device'])
end

opts = OptionParser.new do |o|
  o.banner = "Usage: #{File.basename(__FILE__)} [options]"

  o.on('-i', '--ip-address IP', 'IP address of the webhost') do |value|
    options.ip = value
  end

  o.on('-d', '--device ID', 'Device id') do |value|
    options.device = MEACControl::Device.new(value)
  end

  o.on('-D', '--debug', 'Turn on debug output') do
    options.debug = true
  end

  o.on('-c', '--configure', 'Creates a config file in ~/.meacctl containing',
    'the device id and the ip address') do
    options.configure = true
  end

  o.on('--query-drive', 'Query wheter the AC is on or off') do
    options.query_mode = true
    options.commands << MEACControl::Command::Drive.request
  end

  o.on('--query-fan-speed', 'Query the AC fan speed') do
    options.query_mode = true
    options.commands << MEACControl::Command::FanSpeed.request
  end

  o.on('--on', 'Turn AC on') do
    cmd = MEACControl::Command::Drive.new
    cmd.on
    options.commands << cmd
  end

  o.on('--off', 'Turn AC off') do
    cmd = MEACControl::Command::Drive.new
    cmd.off
    options.commands << cmd
  end
end
opts.parse!

# Create a configuration file.
if options.configure and options.ip and options.device
  File.open(CONFIG_FILE, 'w') do |file|
    file.write(YAML.dump({'ip' => options.ip, 'device' => options.device.id.to_i}))
  end
end

unless options.ip and options.device and !options.commands.empty?
  puts opts.banner
  puts opts.summarize
  exit 1
end

if options.query_mode
  response = MEACControl::HTTP.get(options.ip, options.device, options.commands)
else
  response = MEACControl::HTTP.set(options.ip, options.device, options.commands)
end

if options.debug
  puts "########### get request ###########"
  puts response.request.to_xml
  puts ""
  puts "########### get response ###########"
  puts response.to_xml
  puts ""
end

if response.errors?
  response.error_messages.each do |msg|
    puts "ERROR: #{msg}"
  end
  exit 1
end

puts "[Device #{options.device.id}]"

if options.query_mode
  options.commands.each do |cmd|
    value = response.xml.at('//Mnet')[cmd.command]
    puts "#{cmd.command}: #{value}"
  end
else
  options.commands.each do |cmd|
    puts "#{cmd.command} -> #{cmd.value}"
  end
  puts "=> Success"
end

exit 0
